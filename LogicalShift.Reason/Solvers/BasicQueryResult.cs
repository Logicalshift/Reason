using LogicalShift.Reason.Api;
using System;
using System.Threading.Tasks;

namespace LogicalShift.Reason.Solvers
{
    /// <summary>
    /// Represents a simple succeeded/failed query result
    /// </summary>
    public class BasicQueryResult : IQueryResult
    {
        /// <summary>
        /// True if the query was successful
        /// </summary>
        private readonly bool _success;

        /// <summary>
        /// The bindings generated by this query (null if the query was not successful)
        /// </summary>
        private readonly IBindings _bindings;

        public BasicQueryResult(bool succeeded, IBindings bindings)
        {
            _success = succeeded;
            _bindings = bindings;
        }

        public bool Success
        {
            get { return _success; }
        }

        public IBindings Bindings
        {
            get { return _bindings; }
        }

        public Task<IQueryResult> Next()
        {
            // No further results
            return Task.FromResult<IQueryResult>(null);
        }
    }
}
