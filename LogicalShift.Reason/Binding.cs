using LogicalShift.Reason.Api;
using LogicalShift.Reason.Assignment;
using System;
using System.Collections.Generic;
using System.Linq;

namespace LogicalShift.Reason
{
    /// <summary>
    /// Methods that help with binding variables
    /// </summary>
    public static class Binding
    {
        /// <summary>
        /// Substitutes any variable assignments with their bindings
        /// </summary>
        public static IEnumerable<IAssignmentLiteral> BindVariables(this IEnumerable<IAssignmentLiteral> withVariables, IBindings bindings)
        {
            var result = new List<IAssignmentLiteral>();
            var extras = new List<IAssignmentLiteral>();

            // Run through the assignments
            foreach (var assignment in withVariables)
            {
                if (assignment.Value.UnificationKey == null)
                {
                    // Value is a variable (unifies with everything)
                    var boundTo = bindings.GetValueForVariable(assignment.Value);
                    if (boundTo != null)
                    {
                        // Flatten the bound value
                        var flattened = boundTo.Flatten().ToArray();

                        // Assign the target value of the bound value to the original value location
                        var first = (IAssignmentLiteral) flattened[0].RebuildWithParameters(new[] { assignment.Variable, flattened[0].Value });
                        result.Add(first);

                        // Add in any extra variables generated by flattening
                        extras.AddRange(flattened.Skip(1));
                    }
                    else
                    {
                        // Variable is unbound
                        result.Add(assignment);
                    }
                }
                else
                {
                    result.Add(assignment);
                }
            }

            // Remove any extra items to generate the final result
            var eliminator = new AssignmentEliminator(result.Concat(extras));
            eliminator.Eliminate();
            return eliminator.Assigments;
        }
    }
}
